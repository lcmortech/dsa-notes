A binary search tree is a dynamic version of what happens during quicksort. The root represents an arbitrary (but hopefully not too far off from the median) pivot element from the collection. The left subtree is then everything less than the root, and the right subtree is everything greater than the root. The left and right collections are then again ordered in the same manner, i.e. the data structure is defined recursively.

A trie is a dynamic version of what happens during radix sort. You look at the first bit or digit of a number (or first letter of a string) to determine which subtree the value belongs in. You then repeat the procedure recursively using the next character or digit to determine which of the subtree's children it belongs in, and so on.

One way to think about it is that binary search trees take their pivot elements from the collection itself. A trie's pivots, on the other hand, are based on splitting the range of possible inputs evenly. Consider a binary 0-1 trie that stores 32-bit unsigned integers (numbers from 0 to 2^32-1, inclusive). The left subtree contains all the elements of the collection whose most significant bit is 0; the right subtree contains all those whose MSB is 1. This is as though the pivot element was right between 2^31 - 1 and 2^31. It's exactly the pivot needed to split the range of possible integers (0 to 2^32 - 1) into half, with the left side containing 0 to 2^31 - 1 and the right side 2^31 to 2^32 - 1, so exactly 2^31 elements in each range.

Tries are not necessarily binary tree structures, because they can split the input range into any number of parts. A trie node could have, for example, one subtree for each letter in the alphabet.

- Eugene Yarovoi
, Software Engineer at Google (Taken from Quora)